{"version":3,"file":"static/js/629.5c16926d.chunk.js","mappings":"mPAmKA,QAnIA,WACE,MAOMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAXG,CACvCK,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,MAAO,KASHC,EAAgBA,MACpBC,EAAAA,EAAAA,IACEd,GACAe,EAAAA,EAAAA,IACE,0DAEF,KAEFjB,EAAS,QAAQ,EAyBbkB,EAAkBC,IAAyC,IAAxC,WAAEC,EAAU,MAAEC,GAAoBF,EACzDX,EAAgB,IAChBE,EAAe,IAAKD,EAAa,CAACW,GAAaC,GAAQ,EAGzD,OACEC,EAAAA,EAAAA,KAAA,OACEC,UAAU,yCACVC,MAAO,CACLC,gBAAiB,qDACjBC,eAAgB,SAChBC,UAEFL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0CAAyCI,UACtDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,kCAAiCI,SAAA,EAC9CL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBI,UAClCL,EAAAA,EAAAA,KAACO,EAAAA,EAAY,OAEfD,EAAAA,EAAAA,MAAA,OAAKL,UAAU,iCAAgCI,SAAA,EAC7CL,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0CAAyCI,SAAC,cAGxDC,EAAAA,EAAAA,MAAA,QAAME,SAAWC,GA5CPA,KAClBA,EAAEC,iBACFxB,EAAgB,IAEiB,KAA7BC,EAAYE,MAAMsB,OACbzB,EAAgB,2CACQ,KAA7BC,EAAYG,MAAMqB,OACbzB,EAAgB,0CACQ,KAA7BC,EAAYK,MAAMmB,OACbzB,EAAgB,yCACW,KAAhCC,EAAYI,SAASoB,OAChBzB,EAAgB,0CAEvBH,GAAW,IAEX6B,EAAAA,EAAAA,IAAOzB,EAAaM,GAAgBoB,IAClC3B,EAAgB2B,EAAM,SAExB9B,GAAW,KA0BkB+B,CAAWL,GAAGJ,SAAA,EACnCC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,GAAEI,SAAA,EACfL,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,aAAc7B,EAAYE,MAC1BS,WAAW,QACXmB,eAAe,OACfC,WAAW,aACXtB,gBAAiBA,KAGnBI,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,aAAc7B,EAAYG,MAC1BQ,WAAW,QACXmB,eAAe,OACfC,WAAW,YACXtB,gBAAiBA,KAEnBI,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,aAAc7B,EAAYK,MAC1BM,WAAW,QACXmB,eAAe,OACfC,WAAW,WACXtB,gBAAiBA,KAGnBI,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRC,aAAc7B,EAAYI,SAC1BO,WAAW,WACXmB,eAAe,OACfC,WAAW,WACXtB,gBAAiBA,QAIrBI,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAACC,WAAW,OAAMf,SAAEpB,KAC9Be,EAAAA,EAAAA,KAAA,UACEqB,KAAK,SACLpB,UACE,+BAAiCnB,EAAU,WAAa,IACzDuB,SACF,cAIDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,mBAAkBI,SAAA,CAAC,2BACP,KACzBL,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACC,GAAG,SAAQlB,UAClBL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kGAAiGI,SAAC,2BAWpI,C","sources":["screens/public/signup_screen/SignupScreen.tsx"],"sourcesContent":["/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useState } from \"react\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport LandingIntro from \"../../../components/landing_intro/LandingIntro\";\nimport InputText from \"../../../components/text/InputText\";\nimport ErrorText from \"../../../components/text/ErrorText\";\nimport { SignUpCred } from \"../../../service/supabase/supa_auth/actions/AuthSignUp\";\nimport { signUp } from \"../../../service/supabase/supa_auth/AuthApi\";\nimport { showAlertWithTimeout } from \"../../../data_store/slice/ToastAlertSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { getSuccessAlertData } from \"../../../provider/alert_toast_provider/AlertToastProvider\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Prop types for the update form value function.\n */\ninterface UpdateProps {\n  updateType: string;\n  value: string;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Component definition for the register screen.\n *\n * @returns The Register component.\n */\nfunction Register() {\n  const INITIAL_REGISTER_OBJ: SignUpCred = {\n    fName: \"\",\n    lName: \"\",\n    password: \"\",\n    email: \"\",\n  };\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [registerObj, setRegisterObj] = useState(INITIAL_REGISTER_OBJ);\n\n  const signUpHandler = () => {\n    showAlertWithTimeout(\n      dispatch,\n      getSuccessAlertData(\n        \"Sign up successfull! Please verify the email to login.\"\n      ),\n      3000\n    );\n    navigate(\"login\");\n  };\n\n  const submitForm = (e: any) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n\n    if (registerObj.fName.trim() === \"\")\n      return setErrorMessage(\"First name is required! (use any value)\");\n    if (registerObj.lName.trim() === \"\")\n      return setErrorMessage(\"Last name is required! (use any value)\");\n    if (registerObj.email.trim() === \"\")\n      return setErrorMessage(\"Email Id is required! (use any value)\");\n    if (registerObj.password.trim() === \"\")\n      return setErrorMessage(\"Password is required! (use any value)\");\n    else {\n      setLoading(true);\n      // Show alert\n      signUp(registerObj, signUpHandler, (error: string) => {\n        setErrorMessage(error);\n      });\n      setLoading(false);\n    }\n  };\n\n  const updateFormValue = ({ updateType, value }: UpdateProps) => {\n    setErrorMessage(\"\");\n    setRegisterObj({ ...registerObj, [updateType]: value });\n  };\n\n  return (\n    <div\n      className=\"h-screen bg-base-200 flex items-center\"\n      style={{\n        backgroundImage: \"url(https://source.unsplash.com/random?wallpapers)\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div className=\"card mx-auto w-full max-w-5xl shadow-xl\">\n        <div className=\"grid md:grid-cols-2 grid-cols-1\">\n          <div className=\"glass rounded-l-2xl\">\n            <LandingIntro />\n          </div>\n          <div className=\"py-12 px-10 bg-primary-content\">\n            <h2 className=\"text-2xl font-semibold mb-2 text-center\">\n              Register\n            </h2>\n            <form onSubmit={(e) => submitForm(e)}>\n              <div className=\"\">\n                <InputText\n                  defaultValue={registerObj.fName}\n                  updateType=\"fName\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"First name\"\n                  updateFormValue={updateFormValue}\n                />\n\n                <InputText\n                  defaultValue={registerObj.lName}\n                  updateType=\"lName\"\n                  containerStyle=\"mt-2\"\n                  labelTitle=\"Last name\"\n                  updateFormValue={updateFormValue}\n                />\n                <InputText\n                  defaultValue={registerObj.email}\n                  updateType=\"email\"\n                  containerStyle=\"mt-2\"\n                  labelTitle=\"Email Id\"\n                  updateFormValue={updateFormValue}\n                />\n\n                <InputText\n                  defaultValue={registerObj.password}\n                  updateType=\"password\"\n                  containerStyle=\"mt-2\"\n                  labelTitle=\"Password\"\n                  updateFormValue={updateFormValue}\n                />\n              </div>\n\n              <ErrorText styleClass=\"mt-2\">{errorMessage}</ErrorText>\n              <button\n                type=\"submit\"\n                className={\n                  \"btn mt-2 w-full btn-primary\" + (loading ? \" loading\" : \"\")\n                }\n              >\n                Register\n              </button>\n\n              <div className=\"text-center mt-2\">\n                Already have an account?{\" \"}\n                <NavLink to=\"/login\">\n                  <span className=\"  inline-block  hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Login\n                  </span>\n                </NavLink>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the Register component.\nexport default Register;\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"],"names":["navigate","useNavigate","dispatch","useDispatch","loading","setLoading","useState","errorMessage","setErrorMessage","registerObj","setRegisterObj","fName","lName","password","email","signUpHandler","showAlertWithTimeout","getSuccessAlertData","updateFormValue","_ref","updateType","value","_jsx","className","style","backgroundImage","backgroundSize","children","_jsxs","LandingIntro","onSubmit","e","preventDefault","trim","signUp","error","submitForm","InputText","defaultValue","containerStyle","labelTitle","ErrorText","styleClass","type","NavLink","to"],"sourceRoot":""}