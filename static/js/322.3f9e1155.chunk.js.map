{"version":3,"file":"static/js/322.3f9e1155.chunk.js","mappings":"yOAwJA,QAxHA,WACE,MAKMA,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAUC,IAAeJ,EAAAA,EAAAA,UARK,CACnCK,SAAU,GACVC,MAAO,KAQHC,EAAiBC,IACrBZ,GAASa,EAAAA,EAAAA,IAAQD,GAAU,EA6BvBE,EAAkBC,IAAyC,IAAxC,WAAEC,EAAU,MAAEC,GAAoBF,EACzDT,EAAgB,IAChBE,EAAY,IAAKD,EAAU,CAACS,GAAaC,GAAQ,EAGnD,OACEC,EAAAA,EAAAA,KAAA,OACEC,UAAU,yCACVC,MAAO,CACLC,gBAAiB,qDACjBC,eAAgB,SAChBC,UAEFL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2CAA0CI,UACvDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,kCAAiCI,SAAA,EAC9CL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBI,UAClCL,EAAAA,EAAAA,KAACO,EAAAA,EAAY,OAEfD,EAAAA,EAAAA,MAAA,OAAKL,UAAU,iCAAgCI,SAAA,EAC7CL,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0CAAyCI,SAAC,WACxDC,EAAAA,EAAAA,MAAA,QAAME,SAAWC,GA9CPA,KAClBA,EAAEC,iBACFtB,EAAgB,IACc,KAA1BC,EAASG,MAAMmB,OACVvB,EACL,uDAE6B,KAA7BC,EAASE,SAASoB,OACbvB,EACL,wDAEMwB,EAAAA,EAAAA,GAAiBvB,EAASE,WAMlCN,GAAW,IACX4B,EAAAA,EAAAA,IAAOxB,EAAUI,GAAgBqB,IAC/BC,QAAQC,IAAI,QAASF,GACrB1B,EAAgB0B,EAAM,SAExB7B,GAAW,IAVJG,EACL,6KAiC2B6B,CAAWR,GAAGJ,SAAA,EACnCC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,OAAMI,SAAA,EACnBL,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CACRC,KAAMC,EAAAA,EAAUC,MAChBC,aAAcjC,EAASG,MACvBM,WAAW,QACXyB,eAAe,OACfC,WAAW,WACX5B,gBAAiBA,EACjB6B,WAA6B,KAAjBtC,KAGda,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CACRI,aAAcjC,EAASE,SACvB4B,KAAMC,EAAAA,EAAUM,SAChB5B,WAAW,WACXyB,eAAe,OACfC,WAAW,WACX5B,gBAAiBA,EACjB6B,WAA6B,KAAjBtC,QAIhBa,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBI,UACtCL,EAAAA,EAAAA,KAAC2B,EAAAA,GAAI,CAACC,GAAG,mBAAkBvB,UACzBL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,yGAAwGI,SAAC,0BAM7HL,EAAAA,EAAAA,KAAC6B,EAAAA,EAAS,CAACC,WAAW,OAAMzB,SAAElB,KAC9Ba,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLlB,UAAS,iCAAA8B,OACP/C,EAAU,WAAa,IACtBqB,SACJ,WAIDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,mBAAkBI,SAAA,CAAC,6BACL,KAC3BL,EAAAA,EAAAA,KAACgC,EAAAA,GAAO,CAACJ,GAAG,UAASvB,UACnBL,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kGAAiGI,SAAC,8BAWpI,C,iBCzIA,SAAS4B,EAAczC,GAErB,MADiB,6BACC0C,KAAK1C,EACzB,CAUA,SAASoB,EAAiBrB,GAExB,MADoB,sDACC2C,KAAK3C,EAC5B,C","sources":["screens/public/login_screen/LoginScreen.tsx","util/input/Input.ts"],"sourcesContent":["/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport LandingIntro from \"../../../components/landing_intro/LandingIntro\";\nimport InputText, { InputType } from \"../../../components/text/InputText\";\nimport ErrorText from \"../../../components/text/ErrorText\";\nimport { LoginCred } from \"../../../service/supabase/supa_auth/actions/AuthSignIn\";\nimport { signIn } from \"../../../service/supabase/supa_auth/AuthApi\";\nimport { AuthData, onLogin } from \"../../../data_store/slice/AuthSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { validatePassword } from \"../../../util/input/Input\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Proptypes for the update form value function.\n */\ninterface UpdateProps {\n  updateType: string;\n  value: string;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Component definition for the login screen.\n *\n * @returns The Login component.\n */\nfunction Login() {\n  const INITIAL_LOGIN_OBJ: LoginCred = {\n    password: \"\",\n    email: \"\",\n  };\n\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loginObj, setLoginObj] = useState<LoginCred>(INITIAL_LOGIN_OBJ);\n\n  const signInHandler = (authData: AuthData) => {\n    dispatch(onLogin(authData));\n  };\n\n  const submitForm = (e: any) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n    if (loginObj.email.trim() === \"\")\n      return setErrorMessage(\n        \"Email Id is required! Please enter a valid email id\"\n      );\n    if (loginObj.password.trim() === \"\")\n      return setErrorMessage(\n        \"Password is required! Please enter a valid password\"\n      );\n    else if (!validatePassword(loginObj.password)) {\n      return setErrorMessage(\n        \"Password must contain at least one lowercase letter, one uppercase letter, one numeric digit,\" +\n          \"and one special character. The password must be eight characters or longer.\"\n      );\n    } else {\n      setLoading(true);\n      signIn(loginObj, signInHandler, (error: string) => {\n        console.log(\"error\", error);\n        setErrorMessage(error);\n      });\n      setLoading(false);\n    }\n  };\n\n  const updateFormValue = ({ updateType, value }: UpdateProps) => {\n    setErrorMessage(\"\");\n    setLoginObj({ ...loginObj, [updateType]: value });\n  };\n\n  return (\n    <div\n      className=\"h-screen bg-base-200 flex items-center\"\n      style={{\n        backgroundImage: \"url(https://source.unsplash.com/random?wallpapers)\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div className=\"card mx-auto w-full max-w-5xl shadow-xl \">\n        <div className=\"grid md:grid-cols-2 grid-cols-1\">\n          <div className=\"glass rounded-l-2xl\">\n            <LandingIntro />\n          </div>\n          <div className=\"py-24 px-10 bg-primary-content\">\n            <h2 className=\"text-2xl font-semibold mb-2 text-center\">Login</h2>\n            <form onSubmit={(e) => submitForm(e)}>\n              <div className=\"mb-4\">\n                <InputText\n                  type={InputType.EMAIL}\n                  defaultValue={loginObj.email}\n                  updateType=\"email\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Email Id\"\n                  updateFormValue={updateFormValue}\n                  errorState={errorMessage !== \"\"}\n                />\n\n                <InputText\n                  defaultValue={loginObj.password}\n                  type={InputType.PASSWORD}\n                  updateType=\"password\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Password\"\n                  updateFormValue={updateFormValue}\n                  errorState={errorMessage !== \"\"}\n                />\n              </div>\n\n              <div className=\"text-right text-primary\">\n                <Link to=\"/forgot-password\">\n                  <span className=\"text-sm  inline-block  hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Forgot Password?\n                  </span>\n                </Link>\n              </div>\n\n              <ErrorText styleClass=\"mt-8\">{errorMessage}</ErrorText>\n              <button\n                type=\"submit\"\n                className={`btn mt-2 w-full btn-primary + ${\n                  loading ? \" loading\" : \"\"\n                }`}\n              >\n                Login\n              </button>\n\n              <div className=\"text-center mt-4\">\n                Don't have an account yet?{\" \"}\n                <NavLink to=\"/signup\">\n                  <span className=\"  inline-block  hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Register\n                  </span>\n                </NavLink>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the Login component.\nexport default Login;\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Function to check the email is valid or not.\n * @param email\n * @returns boolean\n */\n\nfunction validateEmail(email: string) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Function to check the password is valid or not.\n * @param password\n * @returns boolean\n * @description Password must contain at least one lowercase letter, one uppercase letter, one numeric digit,\n * and one special character. The password must be eight characters or longer.\n */\nfunction validatePassword(password: string): boolean {\n  var passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;\n  return passwordRegex.test(password);\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the functions\nexport { validateEmail, validatePassword };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"],"names":["dispatch","useDispatch","loading","setLoading","useState","errorMessage","setErrorMessage","loginObj","setLoginObj","password","email","signInHandler","authData","onLogin","updateFormValue","_ref","updateType","value","_jsx","className","style","backgroundImage","backgroundSize","children","_jsxs","LandingIntro","onSubmit","e","preventDefault","trim","validatePassword","signIn","error","console","log","submitForm","InputText","type","InputType","EMAIL","defaultValue","containerStyle","labelTitle","errorState","PASSWORD","Link","to","ErrorText","styleClass","concat","NavLink","validateEmail","test"],"sourceRoot":""}