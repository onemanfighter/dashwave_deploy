{"version":3,"file":"static/js/446.f8b72b5c.chunk.js","mappings":"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","sources":["components/notification/NotificationButton.tsx","components/text/InputText.tsx","screens/private/screens/profile/profile_setting/ProfileSettingScreen.tsx"],"sourcesContent":["/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { NOTIFICATION_MODAL_ID } from \"./NotificationComponent\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Enums for the notification button type.\n */\nenum NotificationButtonType {\n  PRIMARY = \"btn-primary\",\n  SECONDARY = \"btn-secondary\",\n  SUCCESS = \"btn-success\",\n  DANGER = \"btn-danger\",\n  WARNING = \"btn-warning\",\n  INFO = \"btn-info\",\n  LIGHT = \"btn-light\",\n  DARK = \"btn-dark\",\n  LINK = \"btn-link\",\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * The notification button props.\n * @param buttonText The text of the button.\n * @param onClickHandler The on click handler of the button.\n * @param buttonType The button type.\n * @param isButtonOutline The button outline.\n */\ninterface INotificationButtonProps {\n  buttonText: string;\n  onClickHandler: () => void;\n  buttonType?: NotificationButtonType;\n  isButtonOutline?: boolean;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Notification button component.\n *\n * @param props  The notification button props.\n * @returns The notification button component.\n */\nfunction NotificationButton(props: INotificationButtonProps) {\n  return (\n    <div>\n      <label\n        htmlFor={NOTIFICATION_MODAL_ID}\n        className={`btn ${props.buttonType} ${\n          props.isButtonOutline ? \"btn-outline\" : \"\"\n        }`}\n        onClick={props.onClickHandler}\n      >\n        {props.buttonText}\n      </label>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the NotificationButton component.\nexport default NotificationButton;\nexport type { INotificationButtonProps };\nexport { NotificationButtonType };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useState } from \"react\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * The input types for the input component.\n */\nenum InputType {\n  EMAIL = \"email\",\n  PASSWORD = \"password\",\n  TEXT = \"text\",\n  NUMBER = \"number\",\n  DATE = \"date\",\n  FILE = \"file\",\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * The input text props.\n */\ninterface IInputTextProps {\n  labelTitle: string;\n  labelStyle?: string;\n  type?: InputType;\n  containerStyle?: string;\n  defaultValue?: string;\n  placeholder?: string;\n  updateFormValue: (args: { updateType: string; value: string }) => void;\n  updateType: string;\n  errorState?: boolean;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Input text component.\n *\n * @param props  The input text props.\n * @returns The input text component.\n */\nfunction InputText(props: IInputTextProps) {\n  const [value, setValue] = useState(props.defaultValue);\n\n  const updateInputValue = (val: any) => {\n    setValue(val);\n    props.updateFormValue({ updateType: props.updateType, value: val });\n  };\n\n  const [inputType, setInputType] = useState(props.type);\n\n  const handleVisibility = () => {\n    if (inputType === InputType.PASSWORD) {\n      setInputType(InputType.TEXT);\n    } else {\n      setInputType(InputType.PASSWORD);\n    }\n  };\n\n  return (\n    <div className={`form-control w-full ${props.containerStyle}`}>\n      <label className=\"label\">\n        <span className={\"label-text text-base-content \" + props.labelStyle}>\n          {props.labelTitle}\n        </span>\n      </label>\n      <div className=\"flex flex-row gap-1 items-center\">\n        <input\n          type={inputType || \"text\"}\n          value={value}\n          placeholder={props.placeholder || \"\"}\n          onChange={(e) => updateInputValue(e.target.value)}\n          className={`input  input-bordered w-full ${\n            props.errorState ? \" text-error-content\" : \"\"\n          }`}\n        />\n        {props.type === InputType.PASSWORD && (\n          <PasswordEye handleVisibility={handleVisibility} />\n        )}\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Export the InputText password eye component.\n * @param props  The password eye props.\n * @returns The password eye component.\n */\nfunction PasswordEye(props: { handleVisibility: () => void }) {\n  return (\n    <label className=\"swap  scale-75\">\n      {/* this hidden checkbox controls the state */}\n      <input type=\"checkbox\" onClick={props.handleVisibility} />\n      {/* eye icon */}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        className=\"swap-off fill-current w-10 h-10\"\n      >\n        <path d=\"M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z\" />\n        <path\n          fill-rule=\"evenodd\"\n          d=\"M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z\"\n          clip-rule=\"evenodd\"\n        />\n      </svg>\n\n      {/* moon icon */}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        className=\"swap-on fill-current w-10 h-10\"\n      >\n        <path d=\"M3.53 2.47a.75.75 0 0 0-1.06 1.06l18 18a.75.75 0 1 0 1.06-1.06l-18-18ZM22.676 12.553a11.249 11.249 0 0 1-2.631 4.31l-3.099-3.099a5.25 5.25 0 0 0-6.71-6.71L7.759 4.577a11.217 11.217 0 0 1 4.242-.827c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113Z\" />\n        <path d=\"M15.75 12c0 .18-.013.357-.037.53l-4.244-4.243A3.75 3.75 0 0 1 15.75 12ZM12.53 15.713l-4.243-4.244a3.75 3.75 0 0 0 4.244 4.243Z\" />\n        <path d=\"M6.75 12c0-.619.107-1.213.304-1.764l-3.1-3.1a11.25 11.25 0 0 0-2.63 4.31c-.12.362-.12.752 0 1.114 1.489 4.467 5.704 7.69 10.675 7.69 1.5 0 2.933-.294 4.242-.827l-2.477-2.477A5.25 5.25 0 0 1 6.75 12Z\" />\n      </svg>\n    </label>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the InputText component\nexport default InputText;\nexport type { IInputTextProps };\nexport { InputType };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport InputText, { InputType } from \"../../../../../components/text/InputText\";\nimport { showNotification } from \"../../../../../data_store/slice/NotificationSlice\";\nimport TitleCard from \"../../../../../components/card/TitleCard\";\nimport { RootState } from \"../../../../../data_store/Store\";\nimport {\n  SocialType,\n  UserProfileData,\n} from \"../../../../../service/supabase/supastore/user_profile/UserCollection\";\nimport FacebookIcon from \"../../../../../assets/icons/social_icon/FacebookIcon\";\nimport { InstagramIcon } from \"../../../../../assets/icons/social_icon/InstagramIcon\";\nimport { GithubIcon } from \"../../../../../assets/icons/social_icon/GithubIcon\";\nimport { LinkedInIcon } from \"../../../../../assets/icons/social_icon/LinkinIcon\";\nimport { XIcon } from \"../../../../../assets/icons/social_icon/XIcon\";\nimport { YoutubeIcon } from \"../../../../../assets/icons/social_icon/YoutubeIcon\";\nimport { WebsiteIcon } from \"../../../../../assets/icons/social_icon/WebsiteIcon\";\nimport { useState } from \"react\";\nimport { userProfileDataUpdate } from \"../../../../../service/supabase/supastore/user_profile/UserProfileStoreApi\";\nimport { updateProfile } from \"../../../../../data_store/slice/ProfileSlice\";\nimport { getAuthUserID } from \"../../../../../data_store/slice/AuthSlice\";\nimport NotificationButton, {\n  NotificationButtonType,\n} from \"../../../../../components/notification/NotificationButton\";\nimport { getSocialMediaLink } from \"../../../../../util/Utils\";\nimport { showAlertWithTimeout } from \"../../../../../data_store/slice/ToastAlertSlice\";\nimport { ToastAlertData } from \"../../../../../provider/alert_toast_provider/AlertToastProvider\";\nimport PageLoadingComponent from \"../../../../../components/page_loading/PageLoading\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Type definition for the update form value.\n */\ninterface UpdateFormValue {\n  updateType: string;\n  value: string;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * The profile setting screen component.\n * @returns The ProfileSettingScreen component.\n */\nfunction ProfileSettingScreen() {\n  const profileData = useSelector((state: RootState) => state.profile);\n  const [loading, setLoading] = useState(false);\n  const [userProfileState, setUserProfileState] =\n    useState<UserProfileData>(profileData);\n  const dispatch = useDispatch();\n\n  const showSuccessAlertHandler = (toastAlertData: ToastAlertData) => {\n    showAlertWithTimeout(dispatch, toastAlertData, 3000);\n  };\n\n  const profileSavingHandler = (profile: UserProfileData) => {\n    dispatch(updateProfile(profile));\n  };\n\n  const updateProfileHandler = () => {\n    setLoading(true);\n    userProfileDataUpdate(\n      getAuthUserID(),\n      userProfileState,\n      profileSavingHandler,\n      showSuccessAlertHandler\n    );\n    setLoading(false);\n  };\n\n  const updateFormValue = ({ updateType, value }: UpdateFormValue) => {\n    setUserProfileState({ ...userProfileState, [updateType]: value });\n  };\n\n  const TopSideButton = () => {\n    return (\n      <NotificationButton\n        buttonText={\"Update\"}\n        buttonType={NotificationButtonType.INFO}\n        isButtonOutline={true}\n        onClickHandler={() => {\n          dispatch(\n            showNotification({\n              title: \"Profile Update\",\n              description: \"Are you sure you want to update your profile?\",\n              onConfirm: updateProfileHandler,\n            })\n          );\n        }}\n      />\n    );\n  };\n  return (\n    <div className=\"m-2 overflow-scroll\">\n      {loading && <PageLoadingComponent />}\n      <TitleCard\n        title=\"Profile Settings\"\n        topMargin=\"mt-2\"\n        TopSideButtons={<TopSideButton />}\n      >\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <InputText\n            type={InputType.TEXT}\n            labelTitle=\"First name\"\n            defaultValue={profileData.firstName}\n            updateType=\"fname\"\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.TEXT}\n            labelTitle=\"Last name\"\n            defaultValue={profileData.lastName}\n            updateType=\"lname\"\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.EMAIL}\n            labelTitle=\"Email Id\"\n            updateType=\"email\"\n            defaultValue={profileData.email}\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.TEXT}\n            labelTitle=\"Designation\"\n            updateType=\"designation\"\n            defaultValue={profileData.designation}\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.TEXT}\n            labelTitle=\"Place\"\n            updateType=\"place\"\n            defaultValue={profileData.place}\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.NUMBER}\n            labelTitle=\"Year of Experience\"\n            updateType=\"yearOfExp\"\n            defaultValue={profileData.yearOfExp.toString()}\n            updateFormValue={updateFormValue}\n          />\n          <InputText\n            type={InputType.DATE}\n            labelTitle=\"Date of Birth\"\n            updateType=\"dateOfBirth\"\n            defaultValue={profileData.dateOfBirth}\n            updateFormValue={updateFormValue}\n          />\n          <div className=\" flex flex-col item-center\">\n            <label className=\"label\">\n              <span className=\"label-text\">Profile Picture</span>\n            </label>\n            <input\n              type=\"file\"\n              className=\"file-input w-full max-w-xs border border-base-300\"\n            />\n          </div>\n        </div>\n        <div className=\"divider\"></div>\n        <div className={`text-xl font-semibold inline-block`}>Social Links</div>\n        <div className=\"divider col-span-2\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<FacebookIcon />} />\n            <InputText\n              labelTitle=\"Facebook\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.Facebook\n              )}\n              updateType=\"facebook\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<InstagramIcon />} />\n            <InputText\n              labelTitle=\"Instagram\"\n              defaultValue={\n                getSocialMediaLink(\n                  profileData.socialLinks,\n                  SocialType.Instagram\n                ) ?? \"\"\n              }\n              updateType=\"instagram\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<GithubIcon />} />\n            <InputText\n              labelTitle=\"Github\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.Github\n              )}\n              updateType=\"github\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<LinkedInIcon />} />\n            <InputText\n              labelTitle=\"LinkedIn\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.Linkedin\n              )}\n              updateType=\"linkedin\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<XIcon />} />\n            <InputText\n              labelTitle=\"X(Twitter)\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.X\n              )}\n              updateType=\"x\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<YoutubeIcon />} />\n            <InputText\n              labelTitle=\"Youtube\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.Youtube\n              )}\n              updateType=\"youtube\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n          <div className=\"flex flex-row justify-center items-end\">\n            <IconBorderProvider children={<WebsiteIcon />} />\n            <InputText\n              labelTitle=\"Website\"\n              defaultValue={getSocialMediaLink(\n                profileData.socialLinks,\n                SocialType.Website\n              )}\n              updateType=\"website\"\n              updateFormValue={updateFormValue}\n            />\n          </div>\n        </div>\n        <div className=\"flex justify-end\">\n          <TopSideButton />\n        </div>\n      </TitleCard>\n    </div>\n  );\n}\n\nfunction IconBorderProvider(props: { children: any }) {\n  return (\n    <div className=\"btn btn-square mx-1 drop-shadow-md\">{props.children}</div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the ProfileSettingScreen component.\nexport default ProfileSettingScreen;\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"],"names":["NotificationButtonType","props","_jsx","children","htmlFor","NOTIFICATION_MODAL_ID","className","concat","buttonType","isButtonOutline","onClick","onClickHandler","buttonText","InputType","PasswordEye","_jsxs","type","handleVisibility","xmlns","viewBox","fill","d","value","setValue","useState","defaultValue","inputType","setInputType","containerStyle","labelStyle","labelTitle","placeholder","onChange","e","updateInputValue","val","target","updateFormValue","updateType","errorState","PASSWORD","TEXT","IconBorderProvider","_getSocialMediaLink","profileData","useSelector","state","profile","loading","setLoading","userProfileState","setUserProfileState","dispatch","useDispatch","showSuccessAlertHandler","toastAlertData","showAlertWithTimeout","profileSavingHandler","updateProfile","updateProfileHandler","userProfileDataUpdate","getAuthUserID","_ref","TopSideButton","NotificationButton","INFO","showNotification","title","description","onConfirm","PageLoadingComponent","TitleCard","topMargin","TopSideButtons","InputText","firstName","lastName","EMAIL","email","designation","place","NUMBER","yearOfExp","toString","DATE","dateOfBirth","FacebookIcon","getSocialMediaLink","socialLinks","SocialType","Facebook","InstagramIcon","Instagram","GithubIcon","Github","LinkedInIcon","Linkedin","XIcon","X","YoutubeIcon","Youtube","WebsiteIcon","Website"],"sourceRoot":""}