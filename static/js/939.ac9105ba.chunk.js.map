{"version":3,"file":"static/js/939.ac9105ba.chunk.js","mappings":"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","sources":["components/card/ProjectCard.tsx","screens/private/screens/projects/project_edit/ProjectEditScreen.tsx"],"sourcesContent":["/**\n * Author: Amit raikwar\n * Last updated: 05 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { NavLink } from \"react-router-dom\";\nimport { ProjectData } from \"../../service/supabase/supastore/projects/ProjectsCollection\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Project card props.\n * @param data The project card data.\n */\ninterface IProjectCardProps {\n  data: ProjectCardData;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Project card data type definition.\n *\n * @param title The project title.\n * @param description The project description.\n * @param image The project image.\n * @param icon The project icon.\n * @param path The project path.\n * @param projectLiveLink The project live link.\n * @param githubLink The project github link.\n * @param isLive The project is live.\n * @param completed The project completed.\n */\ninterface ProjectCardData {\n  title: string;\n  description: string;\n  image: string;\n  icon: string;\n  path: string;\n  projectLiveLink: string;\n  githubLink: string;\n  isLive: boolean;\n  completed: number;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Project card component.\n * @param propsData The project card props.\n * @returns The project card component.\n */\nfunction ProjectCard(propsData: IProjectCardProps) {\n  const props = propsData.data;\n  return (\n    <div className=\"card w-[360px] bg-base-100 shadow-xl outline-double\">\n      <figure>\n        {props.image ? (\n          <img src={props.image} alt={props.title} loading=\"lazy\" />\n        ) : (\n          <div className=\"skeleton w-[360px] h-[200px] mx-2 mt-2\"></div>\n        )}\n      </figure>\n      <div className=\"card-body\">\n        <div className=\"flex flex-row justify-between items-center p-2 drop-shadow-lg border rounded-xl\">\n          <TitleAndLiveBadge\n            title={props.title}\n            isLive={props.isLive}\n            liveLink={props.projectLiveLink}\n          />\n          {props.icon ? (\n            <img src={props.icon} alt={props.title} className=\"w-10 h-10\" />\n          ) : (\n            <div className=\"skeleton w-16 h-16 rounded-full\"></div>\n          )}\n        </div>\n        <p>{props.description}</p>\n        <div className=\"flex flex-row items-center justify-between\">\n          <progress\n            className=\"progress progress-primary w-[80%] mt-2\"\n            value={props.completed}\n            max=\"100\"\n          ></progress>\n          <div className=\"text-primary text-lg font-semibold\">\n            {props.completed}%\n          </div>\n        </div>\n        <div className=\"card-actions justify-between mt-2 \">\n          <a\n            href={props.githubLink}\n            target=\"_blank\"\n            className=\"btn btn-outline\"\n            rel=\"noreferrer\"\n          >\n            Project link\n          </a>\n          <NavLink to={props.path} className=\"btn btn-outline btn-primary\">\n            See preview\n          </NavLink>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Title and live badge internal component.\nfunction TitleAndLiveBadge(props: {\n  title: string;\n  isLive: boolean;\n  liveLink: string;\n}) {\n  return (\n    <div className=\"flex flex-row justify-start items-center\">\n      <h2 className=\"card-title\">\n        <a\n          href={`http://${props.liveLink}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\" hover:text-primary hover: duration-75\"\n        >\n          {props.title}\n        </a>\n      </h2>\n      <div>\n        {props.isLive && (\n          <span className=\"badge badge-success animate-pulse duration-75 m-1\">\n            Live\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Get the project card data.\n * @param project The project data.\n * @returns The project card data.\n */\nfunction getProjectCardData(project: ProjectData): ProjectCardData {\n  return {\n    title: project.projectName,\n    description: project.projectDesc,\n    icon: project.projectIcon,\n    image: project.images && project.images.length > 0 ? project.images[0] : \"\",\n    path: \"preview/\" + project.projectId,\n    projectLiveLink: project.projectLink,\n    githubLink: project.githubLink,\n    isLive: project.isLive,\n    completed: project.projectCompleted,\n  };\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the ProjectCard component.\nexport default ProjectCard;\nexport type { IProjectCardProps, ProjectCardData };\nexport { getProjectCardData };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","/**\n * Author: Amit raikwar\n * Last updated: 05 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useSelector } from \"react-redux\";\nimport ProjectCard, {\n  getProjectCardData,\n} from \"../../../../../components/card/ProjectCard\";\nimport { RootState } from \"../../../../../data_store/Store\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Interface definition for the project edit screen props.\n */\ninterface IProjectEditScreenProps {}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Component definition for the project edit screen.\n * @param props The props for the project edit screen.\n * @returns The ProjectEditScreen component.\n */\nfunction ProjectEditScreen(props: IProjectEditScreenProps) {\n  const projectData = useSelector((state: RootState) => state.projects);\n  const initialProjectId = projectData[0].projectId;\n  const [selectedProjectId, setSelectedProjectId] =\n    useState<string>(initialProjectId);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (id) {\n      setSelectedProjectId(id);\n    } else {\n      setSelectedProjectId(initialProjectId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handlerProjectChange = (\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    setSelectedProjectId(event.target.value);\n  };\n\n  return (\n    <div className=\"overflow-auto \">\n      <select\n        className=\"select select-bordered w-full max-w-xs\"\n        onChange={handlerProjectChange}\n      >\n        <option disabled selected>\n          Who shot first?\n        </option>\n        {projectData.map((project, index) => (\n          <option key={index} value={project.projectId}>\n            {project.projectName}\n          </option>\n        ))}\n      </select>\n      <div className=\"m-2\">\n        <div className=\" gap-2 flex flex-wrap justify-around\">\n          <div>\n            <ProjectCard\n              data={getProjectCardData(\n                projectData.find(\n                  (project) => project.projectId === selectedProjectId\n                )!\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the ProjectEditScreen component.\nexport default ProjectEditScreen;\nexport type { IProjectEditScreenProps };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"],"names":["TitleAndLiveBadge","props","_jsxs","className","children","_jsx","href","concat","liveLink","target","rel","title","isLive","getProjectCardData","project","projectName","description","projectDesc","icon","projectIcon","image","images","length","path","projectId","projectLiveLink","projectLink","githubLink","completed","projectCompleted","propsData","data","src","alt","loading","value","max","NavLink","to","projectData","useSelector","state","projects","initialProjectId","selectedProjectId","setSelectedProjectId","useState","id","useParams","useEffect","onChange","event","disabled","selected","map","index","ProjectCard","find"],"sourceRoot":""}