{"version":3,"file":"static/js/623.574b4a6d.chunk.js","mappings":"qNA+JA,QA3HA,WACE,MAIOA,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAASC,IAAcN,EAAAA,EAAAA,UAPY,CACxCO,QAAS,KAQLC,EAAwBA,KAC5BT,GAAW,GACXK,GAAY,EAAK,EA6BnB,OACEK,EAAAA,EAAAA,KAAA,OACEC,UAAU,6CACVC,MAAO,CACLC,gBAAiB,qDACjBC,eAAgB,SAChBC,UAEFL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0CAAyCI,UACtDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,8CAA6CI,SAAA,EAC1DL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBI,UAClCL,EAAAA,EAAAA,KAACO,EAAAA,EAAY,OAEfD,EAAAA,EAAAA,MAAA,OAAKL,UAAU,iCAAgCI,SAAA,EAC7CL,EAAAA,EAAAA,KAAA,MAAIC,UAAU,0CAAyCI,SAAC,oBAIvDX,IACCY,EAAAA,EAAAA,MAAAE,EAAAA,SAAA,CAAAH,SAAA,EACEL,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qCAAoCI,SAAC,eAClDL,EAAAA,EAAAA,KAAA,KAAGC,UAAU,sCAAqCI,SAAC,wCAGnDL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBI,UAC/BL,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,GAAG,SAAQL,UAClBL,EAAAA,EAAAA,KAAA,UAAQC,UAAU,6BAA4BI,SAAC,kBAQrDX,IACAY,EAAAA,EAAAA,MAAAE,EAAAA,SAAA,CAAAH,SAAA,EACEL,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iCAAgCI,SAAC,uDAG9CC,EAAAA,EAAAA,MAAA,QAAMK,SAAWC,GAjEXA,KAClBA,EAAEC,iBACFpB,EAAgB,IAEe,KAA3BG,EAAQE,QAAQgB,OACXrB,EAAgB,0CACfsB,EAAAA,EAAAA,GAAcnB,EAAQE,UAG9BR,GAAW,QACX0B,EAAAA,EAAAA,IACEpB,EAAQE,QACRC,GACCkB,IACCxB,EAAgBwB,EAAM,KAPnBxB,EAAgB,2BA0DUyB,CAAWN,GAAGP,SAAA,EACnCL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMI,UACnBL,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRC,KAAMC,EAAAA,EAAUC,MAChBC,aAAc3B,EAAQE,QACtB0B,WAAW,UACXC,eAAe,OACfC,WAAW,WACXC,gBApDIC,IAAyC,IAAxC,WAAEJ,EAAU,MAAEK,GAAoBD,EACzDnC,EAAgB,IAChBI,EAAW,IAAKD,EAAS,CAAC4B,GAAaK,GAAQ,OAsDjC7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CAACC,WAAW,QAAO1B,SAAEb,KAC/BQ,EAAAA,EAAAA,KAAA,UACEoB,KAAK,SACLnB,UACE,+BACCZ,EAAU,WAAa,IACzBgB,SACF,qBAIDC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,mBAAkBI,SAAA,CAAC,6BACL,KAC3BL,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,GAAG,YAAWL,UACrBL,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kGAAiGI,SAAC,iCAa1I,C,iBChJA,SAASU,EAAciB,GAErB,MADiB,6BACCC,KAAKD,EACzB,CAUA,SAASE,EAAiBC,GAExB,MADoB,sDACCF,KAAKE,EAC5B,C","sources":["screens/public/forgot_password/ForgotPassword.tsx","util/input/Input.ts"],"sourcesContent":["/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ErrorText from \"../../../components/text/ErrorText\";\nimport InputText, { InputType } from \"../../../components/text/InputText\";\nimport LandingIntro from \"../../../components/landing_intro/LandingIntro\";\nimport { forgotPassword } from \"../../../service/supabase/supa_auth/AuthApi\";\nimport { validateEmail } from \"../../../util/input/Input\";\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Update props.\n */\ninterface UpdateProps {\n  updateType: string;\n  value: string;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Register object type.\n */\ninterface RegisterObjType {\n  emailId: string;\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * The forgot password screen component.\n * @returns The ForgotPassword component.\n */\nfunction ForgotPassword() {\n  const INITIAL_USER_OBJ: RegisterObjType = {\n    emailId: \"\",\n  };\n\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [linkSent, setLinkSent] = useState(false);\n  const [userObj, setUserObj] = useState(INITIAL_USER_OBJ);\n\n  const forgotPasswordHandler = () => {\n    setLoading(false);\n    setLinkSent(true);\n  };\n\n  const submitForm = (e: any) => {\n    e.preventDefault();\n    setErrorMessage(\"\");\n\n    if (userObj.emailId.trim() === \"\")\n      return setErrorMessage(\"Email Id is required! (use any value)\");\n    else if (!validateEmail(userObj.emailId)) {\n      return setErrorMessage(\"Email Id is not valid!\");\n    } else {\n      setLoading(true);\n      forgotPassword(\n        userObj.emailId,\n        forgotPasswordHandler,\n        (error: string) => {\n          setErrorMessage(error);\n        }\n      );\n      // Call API to send password reset link\n    }\n  };\n\n  const updateFormValue = ({ updateType, value }: UpdateProps) => {\n    setErrorMessage(\"\");\n    setUserObj({ ...userObj, [updateType]: value });\n  };\n\n  return (\n    <div\n      className=\"min-h-screen bg-base-200 flex items-center\"\n      style={{\n        backgroundImage: \"url(https://source.unsplash.com/random?wallpapers)\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div className=\"card mx-auto w-full max-w-5xl shadow-xl\">\n        <div className=\"grid  md:grid-cols-2 grid-cols-1 rounded-xl\">\n          <div className=\"glass rounded-l-2xl\">\n            <LandingIntro />\n          </div>\n          <div className=\"py-24 px-10 bg-primary-content\">\n            <h2 className=\"text-2xl font-semibold mb-2 text-center\">\n              Forgot Password\n            </h2>\n\n            {linkSent && (\n              <>\n                <p className=\"my-4 text-xl font-bold text-center\">Link Sent</p>\n                <p className=\"mt-4 mb-8 font-semibold text-center\">\n                  Check your email to reset password\n                </p>\n                <div className=\"text-center mt-4\">\n                  <NavLink to=\"/login\">\n                    <button className=\"btn btn-block btn-primary \">\n                      Login\n                    </button>\n                  </NavLink>\n                </div>\n              </>\n            )}\n\n            {!linkSent && (\n              <>\n                <p className=\"my-8 font-semibold text-center\">\n                  We will send password reset link on your email Id\n                </p>\n                <form onSubmit={(e) => submitForm(e)}>\n                  <div className=\"mb-4\">\n                    <InputText\n                      type={InputType.EMAIL}\n                      defaultValue={userObj.emailId}\n                      updateType=\"emailId\"\n                      containerStyle=\"mt-4\"\n                      labelTitle=\"Email Id\"\n                      updateFormValue={updateFormValue}\n                    />\n                  </div>\n\n                  <ErrorText styleClass=\"mt-12\">{errorMessage}</ErrorText>\n                  <button\n                    type=\"submit\"\n                    className={\n                      \"btn mt-2 w-full btn-primary\" +\n                      (loading ? \" loading\" : \"\")\n                    }\n                  >\n                    Send Reset Link\n                  </button>\n\n                  <div className=\"text-center mt-4\">\n                    Don't have an account yet?{\" \"}\n                    <NavLink to=\"/register\">\n                      <button className=\"  inline-block  hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                        Register\n                      </button>\n                    </NavLink>\n                  </div>\n                </form>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the ForgotPassword component.\nexport default ForgotPassword;\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n","/**\n * Author: Amit raikwar\n * Last updated: 04 Feb, 2024\n */\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Function to check the email is valid or not.\n * @param email\n * @returns boolean\n */\n\nfunction validateEmail(email: string) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/**\n * Function to check the password is valid or not.\n * @param password\n * @returns boolean\n * @description Password must contain at least one lowercase letter, one uppercase letter, one numeric digit,\n * and one special character. The password must be eight characters or longer.\n */\nfunction validatePassword(password: string): boolean {\n  var passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;\n  return passwordRegex.test(password);\n}\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Export the functions\nexport { validateEmail, validatePassword };\n\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// End of file\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"],"names":["loading","setLoading","useState","errorMessage","setErrorMessage","linkSent","setLinkSent","userObj","setUserObj","emailId","forgotPasswordHandler","_jsx","className","style","backgroundImage","backgroundSize","children","_jsxs","LandingIntro","_Fragment","NavLink","to","onSubmit","e","preventDefault","trim","validateEmail","forgotPassword","error","submitForm","InputText","type","InputType","EMAIL","defaultValue","updateType","containerStyle","labelTitle","updateFormValue","_ref","value","ErrorText","styleClass","email","test","validatePassword","password"],"sourceRoot":""}